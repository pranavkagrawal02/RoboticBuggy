Program to generate pulse train
for different gantries


const int gantryPin1 = 0;
const int gantryPin2 = 2;
const int gantryPin3 = 4;
const int gantryPin4 = 3;
void setup() {
pinMode(gantryPin1,OUTPUT);
pinMode(gantryPin2,OUTPUT);
pinMode(gantryPin3,OUTPUT);
pinMode(gantryPin4,OUTPUT);
}

void loop() {
digitalWrite(gantryPin1,HIGH);
digitalWrite(gantryPin2,HIGH);
digitalWrite(gantryPin3,HIGH);
digitalWrite(gantryPin4,HIGH);
delayMicroseconds(790);
digitalWrite(gantryPin1,LOW);
delayMicroseconds(1000);
digitalWrite(gantryPin2,LOW);
delayMicroseconds(1000);
digitalWrite(gantryPin3,LOW);
delayMicroseconds(1000);
digitalWrite(gantryPin4,LOW);
delay(5);
delayMicroseconds(750);
}



Motor

void setup()
{
PinMode(5,OUTPUT);
PinMode(6,OUTPUT);
PinMode(7,OUTPUT);
PinMode(8,OUTPUT);
}
void loop()
{				// Forward direction
digitialWrite(5,HIGH);
digitialWrite(6,LOW);
digitialWrite(7,LOW); 
digitialWrite(8,HIGH);
}


//backward

digitialWrite(5,LOW);
digitialWrite(6,HIGH);
digitialWrite(7,HIGH); 
digitialWrite(8, LOW);


// Right Move


digitialWrite(5,LOW);
digitialWrite(6,LOW);
digitialWrite(7,HIGH); 
digitialWrite(8, HIGH);


//left

digitialWrite(5,HIGH);
digitialWrite(6,HIGH);
digitialWrite(7,LOW); 
digitialWrite(8, LOW);


////Clockwise rotation

digitialWrite(5,HIGH);
digitialWrite(6,LOW);
digitialWrite(7,LOW); 
digitialWrite(8, LOW);


// Anticlock-wise rotation


digitialWrite(5,LOW);
digitialWrite(6,LOW);
digitialWrite(7,LOW); 
digitialWrite(8, HIGH);


//Stop


digitialWrite(5,LOW);
digitialWrite(6,LOW);
digitialWrite(7,LOW); 
digitialWrite(8, LOW);


Mannan Whatsapp code



int t1=A0;
int t2=A2;
int pin5=5;
int pin6=6;
int pin7=8;
int pin8=7;
int irPin=4;
int flag=0;
unsigned long d=0;
static int gantryCounter=0;
static long StartTime=0;
static long CurrentTime = 0;
unsigned long ElapsedTime = 0; 
static long StartTimeG=millis();;
static long CurrentTimeG = 0;
unsigned long ElapsedTimeG = 0; 
long previousMillisU = millis(); 
long intervalU = 500;  
#include <NewPing.h>
#define TRIGGER_PIN 13
#define ECHO_PIN 12
#define MAX_DISTANCE 200
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
void setup() {
pinMode(pin5,OUTPUT);  
pinMode(pin6,OUTPUT);  
pinMode(pin7,OUTPUT);
pinMode(pin8,OUTPUT);
pinMode(t1,INPUT);
pinMode(t2,INPUT);
Serial.begin(9600);
Serial.print("+++");  // Enter xbee AT command mode, NB no carriage return here
delay(1500);          // Guard time
Serial.println("ATID 3333, CH C, CN");
}
void loop() {
if(flag==0)
{
 if (Serial.available() > 0)
{
 char s = Serial.read();
  switch (s) {
        case 'M':
      {
        flag=1;
         }
}
}
}
unsigned long currentMillisU = millis();
 if(currentMillisU - previousMillisU > intervalU) 
       {
         
         previousMillisU = currentMillisU;  
         detectObstacle(); 
       }
       
if (flag==1)
{
  gantry();
  
 
}
 if (flag==3)
   {
     //gantryParking();
     CurrentTimeG=millis();
     ElapsedTimeG = CurrentTimeG-StartTimeG;
     
     if(ElapsedTimeG<2000)
     {
      flag=3;
      leftBlind();
     }
     if(ElapsedTimeG>2000 && ElapsedTimeG<4500)
     {
      flag=3;
      normalLineFollow();
     }
     if(ElapsedTimeG>4500) 
     {
      stopBuggy();
      Serial.print("Buggy:1 Parked");
      Serial.println(ElapsedTimeG);
      delay(2000);
      flag=-1;
     }
     
    }
}
void gantry()
{
int r1=digitalRead(t1);
int r2=digitalRead(t2);
if(r1==LOW&&r2==LOW)
{
  digitalWrite(pin5,HIGH);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,HIGH);
  digitalWrite(pin8,LOW);
  
}
 if(r1==LOW&&r2==HIGH)
{
  digitalWrite(pin5,HIGH);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,LOW);
  digitalWrite(pin8,LOW);
  
} if(r1==HIGH&&r2==LOW)
{
  digitalWrite(pin5,LOW);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,HIGH);
  digitalWrite(pin8,LOW);
 }
 if(r1==HIGH&&r2==HIGH)
{
  digitalWrite(pin5,HIGH);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,HIGH);
  digitalWrite(pin8,LOW);
  
}
if (digitalRead(irPin)==HIGH)
{
 StartTime = millis();
d = pulseIn(irPin,HIGH);
 if (d>500 and d<1500) 
            {
                Serial.println(d); 
                Serial.println("Gantry: 1");
                stopBuggy();
                delay(1000);
            }
        else if (d>1500 and d< 2500) //(d> 1500 and d < 2500)
            {
                Serial.println(d); 
                  Serial.println("Gantry: 2");
                  stopBuggy();
                
                  delay(1000);
            }
        else if (d>2500) //(d > 2500 and d < 3500)
            {
               Serial.println(d); 
                
                Serial.println("Gantry: 3");
                  gantryCounter=gantryCounter+1;
                Serial.print("The gantry Counter is: ");
                Serial.println(gantryCounter);
                stopBuggy();
                delay(1000);
            }
         else {
             //Serial.println(d); 
             Serial.println("Gantry: Unknown");
             
         }
 
 if (gantryCounter>=2)
{
 StartTimeG = millis();
 flag=3; 
}
else
{
gantry();
}
}
 
}
void stopBuggy()
  {
  digitalWrite(pin5,LOW);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,LOW);
  digitalWrite(pin8,LOW);
  }
void normalLineFollow()
{
int r1=digitalRead(t1);
int r2=digitalRead(t2);
if(r1==LOW&&r2==LOW)
{
  digitalWrite(pin5,HIGH);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,HIGH);
  digitalWrite(pin8,LOW);
  
}
 if(r1==HIGH&&r2==LOW)
{
  digitalWrite(pin5,LOW);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,HIGH);
  digitalWrite(pin8,LOW);
  
} if(r1==LOW&&r2==HIGH)
{
  digitalWrite(pin5,HIGH);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,LOW);
  digitalWrite(pin8,LOW);
 }
 if(r1==HIGH&&r2==HIGH)
{
  digitalWrite(pin5,HIGH);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,HIGH);
  digitalWrite(pin8,LOW);
  
}
}
void leftBlind()
{
int r1=digitalRead(t1);
 if(r1==LOW)
{
  digitalWrite(pin5,HIGH);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,LOW);
  digitalWrite(pin8,LOW);
  
} 
 if(r1==HIGH)
{
  digitalWrite(pin5,HIGH);
  digitalWrite(pin6,LOW);
  digitalWrite(pin7,HIGH);
  digitalWrite(pin8,LOW);
  
}
}
void detectObstacle()
{
delay(50);
unsigned int distanceCm;
distanceCm = sonar.ping_cm();
pinMode(ECHO_PIN,OUTPUT);
digitalWrite(ECHO_PIN,LOW);
pinMode(ECHO_PIN,INPUT);
//Serial.print("Ping: ");
//Serial.println(distanceCm);
//Serial.println("cm");
if((distanceCm<15) && (distanceCm>0))     
{
stopBuggy();
delay(1000);
}
}


 
CSED file code


int t1=A0; int t2=A2; int pin5=5;
int pin6=6; int pin7=8; int pin8=7;
int irPin=4; int flag=0; unsigned
long d=0; static int
gantryCounter=0; static long
StartTime=0; static long
CurrentTime = 0; unsigned long
ElapsedTime = 0; static long
StartTimeG=millis();; static long
CurrentTimeG = 0; unsigned long
ElapsedTimeG = 0; long
previousMillisU = millis(); long
intervalU = 500; #include
<NewPing.h>
#define TRIGGER_PIN 13
#define ECHO_PIN 12
#define MAX_DISTANCE 200
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); void
setup() {
pinMode(pin5,OUTPUT);
pinMode(pin6,OUTPUT);
pinMode(pin7,OUTPUT);
pinMode(pin8,OUTPUT);
pinMode(t1,INPUT); pinMode(t2,INPUT);
Serial.begin(9600);
Serial.print("+++");
delay(1500);
Serial.println("ATID 3333, CH C, CN");
} void loop()
{ if(flag==0)
{ if (Serial.available() >
0)
{ char s =
Serial.read(); switch
(s) { case 'Y':
{
flag=1;
}
}
} } unsigned long currentMillisU = millis();
if(currentMillisU - previousMillisU >
intervalU)
{ previousMillisU = currentMillisU;
detectObstacle();
}
if (flag==1)
{ gantry();
} if
(flag==3) {
//gantryParking();
CurrentTimeG=millis();
ElapsedTimeG = CurrentTimeG-StartTimeG; if(ElapsedTimeG<2000)
{ flag=3;
leftBlind();
}
if(ElapsedTimeG>2000 && ElapsedTimeG<7500)
{ flag=3;
normalLi
neFollow
();
} if(ElapsedTimeG>7500)
{ stopBuggy();
Serial.print("Buggy:1 Parked");
Serial.println(ElapsedTimeG);
delay(2000); flag=-1; }
} } void gantry() { int
r1=digitalRead(t1); int
r2=digitalRead(t2);
if(r1==LOW&&r2==LOW)
{ digitalWrite(pin5,HIGH);
digitalWrite(pin6,LOW);
digitalWrite(pin7,HIGH);
digitalWrite(pin8,LOW);
}
if(r1==LOW&&r2==HIGH)
{ digitalWrite(pin5,HIGH);
digitalWrite(pin6,LOW);
digitalWrite(pin7,LOW);
digitalWrite(pin8,LOW);
}
if(r1==HIGH&&r2==LOW)
{ digitalWrite(pin5,LOW);
digitalWrite(pin6,LOW);
digitalWrite(pin7,HIGH);
digitalWrite(pin8,LOW);
}
if(r1==HIGH&&r2==HIGH)
{ digitalWrite(pin5,HIGH);
digitalWrite(pin6,LOW);
digitalWrite(pin7,HIGH);
digitalWrite(pin8,LOW);
}
if (digitalRead(irPin)==HIGH)
{
StartTime = millis();
d = pulseIn(irPin,HIGH);
if (d>500 and d<1500) //(d > 500 and d < 1500)
{
Serial.println(d);
Serial.println("Gantry:
1"); stopBuggy();
delay(1000); }
else if (d>2000 and d< 3000) //(d> 1500 and d < 2500)
{
Serial.println(d);
Serial.println("Gantry: 2");
stopBuggy();
gantryCounter=gantryCounter+1;
Serial.print("The gantry Counter is: ");
Serial.println(gantryCounter);
stopBuggy(); delay(1000); }
else if (d>3000 and d<4000) //(d > 2500 and d < 3500)
{
Serial.println(d);
Serial.println("Gantry: 3");
delay(1000); } else {
//Serial.println(d);
Serial.println("Gantry: Unknown");
} if
(gantryCounter>=2)
{
StartTimeG = millis();
flag=3; } else gantry();
}
} void
stopBuggy()
{ digitalWrite(pin5,LOW);
digitalWrite(pin6,LOW);
digitalWrite(pin7,LOW);
digitalWrite(pin8,LOW);
} void
normalLineFollow()
{ int
r1=digitalRead(t1); int
r2=digitalRead(t2);
if(r1==LOW&&r2==
LOW)
{ digitalWrite(pin5,HIGH);
digitalWrite(pin6,LOW);
digitalWrite(pin7,HIGH);
digitalWrite(pin8,LOW);
}
if(r1==HIGH&&r2==LOW)
{ digitalWrite(pin5,LOW);
digitalWrite(pin6,LOW);
digitalWrite(pin7,HIGH);
digitalWrite(pin8,LOW);
}
if(r1==LOW&&r2==HIGH)
{ digitalWrite(pin5,HIGH);
digitalWrite(pin6,LOW);
digitalWrite(pin7,LOW);
digitalWrite(pin8,LOW);
}
if(r1==HIGH&&r2==HIGH)
{ digitalWrite(pin5,HIGH);
digitalWrite(pin6,LOW);
digitalWrite(pin7,HIGH);
digitalWrite(pin8,LOW);
} } void leftBlind() {
int
r2=digitalRead(t2);
if(r2==LOW)
{ digitalWrite(pin5,LOW);
digitalWrite(pin6,LOW);
digitalWrite(pin7,HIGH);
digitalWrite(pin8,LOW);
}
if(r2==HIGH)
{ digitalWrite(pin5,HIGH);
digitalWrite(pin6,LOW);
digitalWrite(pin7,HIGH);
digitalWrite(pin8,LOW);
} }
void detectObstacle()
{ delay(50); unsigned int
distanceCm; distanceCm =
sonar.ping_cm();
pinMode(ECHO_PIN,OUTPUT);
digitalWrite(ECHO_PIN,LOW);
pinMode(ECHO_PIN,INPUT);
//Serial.print("Ping: ");
//Serial.println(distanceCm); //Serial.println("cm");
if((distanceCm<15) && (distanceCm>0))
{ stopBuggy();
delay(1000);
}
}

Rohan Code


long previousMillisU = millis(); 
long intervalU = 500;  
#include<NewPing.h>
#include <NewPing.h>
#define trigPin 13
#define echoPin 12
#define MAX_DISTANCE 200
NewPing Sonar(trigPin,echoPin, MAX_DISTANCE);
int ir1 = A0;
int ir2 = A1;
int pin = 4;
int pin5 = 5;
int pin6 = 6;
int pin7 = 7;
int pin8 = 8;
int flag = 0;
int count = 0;
long st = millis(), endt;
unsigned value;
int l, r;
void setup() {
  // put your setup code here, to run once:
  pinMode(pin5, OUTPUT);
  pinMode(pin6, OUTPUT);
  pinMode(pin7, OUTPUT);
  pinMode(pin8, OUTPUT);
   
  Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
  if(flag==0)
    {
      if (Serial.available()>0)
      {
        char s=Serial.read();
        switch (s)
        {
          case 'M':
          {
            flag=1;
          }
        }
      }
    }
    if (flag==1)
    {
      if (digitalRead(pin)>0)
      {
          value=pulseIn(pin,HIGH);
          if(value >1500 && value <2000)
          {
                Serial.println("Gantry 1 Crossed");
                stopp();
                delay(1000);
          }
          if(value >2500 && value <3000)
          {
           
                Serial.println("Gantry 2 Crossed");
                stopp();
                delay(1000);
          }
          if(value >500 && value <1000)
          {
                Serial.println("Gantry 3 Crossed");
                stopp();
                delay(1000);
          }
      }

unsigned long currentMillisU = millis();
 if(currentMillisU - previousMillisU > intervalU) 
       {
         
         previousMillisU = currentMillisU;  
         detectObstacle(); 
       }

    l = digitalRead(ir1);
    r = digitalRead(ir2);

    if (l == HIGH && r == HIGH)
    {
      forward();
    }

    else if (l == LOW && r == HIGH)
    {
      left();
    }

    else if (l == HIGH && r == LOW)
    {
      right();
    }
    else if (l == LOW && r==LOW)
    {
      forward();
      endt= millis();
     
      if(endt - st > 500)
      {
            count++;          
            st=millis();
      }     
            
      if(count == 1)
      {
          forward();
      }   
      if(count == 2)
      {
          left();
          
      }
      if(count == 3)
      {
          right();
          Serial.print(count);
      }
      if(count == 4)
      {
          left();

        Serial.print(count);
          delay(10);
      }                    
      if(count > 5)
      {
          stopp();
          delay(100000);
          Serial.print("Stop");  
          
      }     
    } 
}
}
void forward()
{
  digitalWrite(pin5, HIGH);
  digitalWrite(pin6, LOW);
  digitalWrite(pin7, LOW);
  digitalWrite(pin8, HIGH);
}
void left()
{
  digitalWrite(pin5, HIGH);
  digitalWrite(pin6, LOW);
  digitalWrite(pin7, LOW);
  digitalWrite(pin8, LOW);
}
void right()
{
  digitalWrite(pin5, LOW);
  digitalWrite(pin6, LOW);
  digitalWrite(pin7, LOW);
  digitalWrite(pin8, HIGH);
}
void stopp()
{
  digitalWrite(pin5, LOW);
  digitalWrite(pin6, LOW);
  digitalWrite(pin7, LOW);
  digitalWrite(pin8, LOW);


}
void detectObstacle()
{
delay(50);
unsigned int distanceCm;
distanceCm = Sonar.ping_cm();
pinMode(echoPin,OUTPUT);
digitalWrite(echoPin,LOW);
pinMode(echoPin,INPUT);
//Serial.print("Ping: ");
//Serial.println(distanceCm);
//Serial.println("cm");
if((distanceCm<15) && (distanceCm>0))     
{
stopp();
delay(1000);
}
}


LAB Sir Transmitter code

nt pin=4;
unsigned value ;
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(pin,INPUT);
  

}

void loop() {
  // put your main code here, to run repeatedly:
  value=pulseIn(pin,HIGH);
  Serial.println(value);
  

}

